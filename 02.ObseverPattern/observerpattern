* 옵저버 Obserer Pattern
 1) 정의 
  : 특정 객체의 데이터의 변경이 발생하였을 때, 상대 클래스 및 객체에 의존하지 않으면서 데이터 변경을 통보하고자 할 때
  : 옵서버 패턴은 통보 대상 객체의 관리를 Subject 클래스와 Observer 인터페이스로 일반화한다. 
    그러면 데이터 변경을 통보하는 클래스(ConcreteSubject)는 통보 대상 클래스/객체ConcreteObserver)에 대한 의존성을 제거할 수 있다. 
    결과적으로 옵서버 패턴은 통보 대상 클래스나 대상 객체의 변경에도 ConcreteSubject 클래스를 수정 없이 그대로 사용할 수 있도록 한다.
  
  - Subject: 관찰 대상이 되는 객체. 자신을 관찰하는 옵저버들을 append한 리스트로 옵저버를 관리(attach, detach, notify)함.
  - Observer: Subject를 관찰하는 객체. Subject가 notify를 호출하면 Observer의 update가 호출됨.
  - 일대다 관계
   
 2) 사용예시: 이벤트 핸들러 == 리스너 객체

 3) 코드1
 class Subject:    
    def __init__(self):
        self.__observers = []
    
    def register(self, observer):
        self.__observers.append(observer)
    
    def notifyAll(self, *args, **kwargs):
        for observer in self.__observers:
            observer.notify(self, *args, **kwargs)


class Observer1:    
    def __init__(self, subject):
        subject.register(self)
    
    def notify(self, subject, *args):
        print(type(self).__name__,':: Got', args, 'From', subject)

class Observer2:    
    def __init__(self, subject):
        subject.register(self)
    
    def notify(self, subject, *args):
        print(type(self).__name__, ':: Got', args, 'From', subject)


subject = Subject()
observer1 = Observer1(subject)
observer2 = Observer2(subject)
subject.notifyAll('notification')

  3) 코드2
  class NewsPublisher:    
    def __init__(self):
        self.__subscribers = []   # 옵저버 리스트
        self.__latestNews = None   # 이벤트 상태 값 초기화
    
    def attach(self, subscriber):   # 옵저버 리스트에 옵저버 추가(이벤트를 원하는 해당객체(옵저버))
        self.__subscribers.append(subscriber)
    
    def detach(self):
        return self.__subscribers.pop()  # 옵저버 리스트에 옵저버 제거(이벤트 해지를 원하는 해당객체(옵저버))
    
    def subscribers(self):           # 옵저버리스트에 등록된 애들 단순 확인 메소드
        return [type(x).__name__ for x in self.__subscribers]
    
    def notifySubscribers(self):    # 옵저버리스트에 등록된 객체들에게 알림하는 메소드
        for sub in self.__subscribers:
            sub.update()            # 해당 옵저버객체의 udpate() 메소드 각각 이벤트에 관련한 내용 구현해야됨.
    
    def addNews(self, news):    # setter : 뉴스 이벤트 메시지 내용
        self.__latestNews = news
    
    def getNews(self):          # getter : : 뉴스 이벤트 메시지 내용
        return "Got News:", self.__latestNews

from abc import ABCMeta, abstractmethod

class Subscriber(metaclass=ABCMeta):    
    @abstractmethod
    def update(self):
        pass

class SMSSubscriber:    
    def __init__(self, publisher):
        self.publisher = publisher
        self.publisher.attach(self)
    
    def update(self):
        print(type(self).__name__, self.publisher.getNews())

class EmailSubscriber:    
    def __init__(self, publisher):
        self.publisher = publisher
        self.publisher.attach(self)
    
    def update(self):
        print(type(self).__name__, self.publisher.getNews())

class AnyOtherSubscriber:    
    def __init__(self, publisher):
        self.publisher = publisher
        self.publisher.attach(self)
    
    def update(self):
        print(type(self).__name__, self.publisher.getNews())


if __name__ == '__main__':
    news_publisher = NewsPublisher()
    
    for Subscribers in [SMSSubscriber, EmailSubscriber, AnyOtherSubscriber]:

        Subscribers(news_publisher)

        print("\nSubscribers:", news_publisher.subscribers())
        
        news_publisher.addNews('Hello World!')
        news_publisher.notifySubscribers()
        
        print("\nDetached:", type(news_publisher.detach()).__name__)
        print("\nSubscribers:", news_publisher.subscribers())
        
        news_publisher.addNews('My second news!')
        news_publisher.notifySubscribers()

 
