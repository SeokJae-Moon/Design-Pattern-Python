* 스트래티지 패턴Strategy Pattern
 1) 정의 
   : 스트래티지 패턴Strategy Pattern은 전략을 쉽게 바꿀 수 있도록 해주는 디자인 패턴이다. 
     여기에서 전략이란 어떤 목적을 달성하기 위해 일을 수행하는 방식, 비즈니스 규칙, 문제를 해결하는 알고리즘 등으로 이해할 수 있다. 
     프로그램에서 전략을 실행할 때는 쉽게 전략을 바꿔야 할 필요가 있는 경우가 많이 발생한다. 
     특히, 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 스트래티지 패턴은 매우 유용하다.
 2) 구현
   : 상속시 메소드 오버라이드 상황에서 바뀌는 메소드(오버라이드)와 그렇지 않은 부분 메소드로 인터페이스 기반의 캡슐화 분리한다.

 3) 코드
import abc 
class Duck(metaclass=abc.ABCMeta):  
 
  @abc.abstractmethod
  def display(self):
    pass
  
  def performFly(self):
    self.fly_behavior.fly()
 
  def performQuack(self):
    self.quack_behavior.quack()
 
class MallardDuck(Duck):
  def __init__ (self):
    self.fly_behavior = FlyNoway()
    self.quack_behavior = Quack()
 
  def display(self):
    print("Mallard duck")
 
class RubberDuck(Duck):
  def __init__ (self):
    self.fly_behavior = FlyWithWings()
    self.quack_behavior = Quack()
 
  def display(self):
    print("Rubber duck")
 
class RedHeadDuck(Duck):
  def __init__ (self):
    self.fly_behavior = FlyWithWings()
    self.quack_behavior = MuteQuack()
 
  def display(self):
    print("Red head duck")
 
class FlyBehavior(metaclass = abc.ABCMeta):
  @abc.abstractmethod
  def fly(self):
    pass
 
class FlyWithWings(FlyBehavior):
  def fly(self):
    print("Fly with wings")
 
class FlyNoway(FlyBehavior):
  def fly(self):
    print("Fly no way")
 
class QuackBehavior(metaclass=abc.ABCMeta):
  @abc.abstractmethod
  def quack(self):
    pass
 
class Quack(QuackBehavior):
  def quack(self):
    print("Quack Quack")
 
class MuteQuack(QuackBehavior):
  def quack(self):
    print ("Mute...")
 

def main():
    mallad_duck = MallardDuck()
    rubber_duck = RubberDuck()
    redhead_duck = RedHeadDuck()
    
    print("### MALLAD DUCK ###")
    mallad_duck.display()
    mallad_duck.performFly()
    mallad_duck.performQuack()

    print("### RUBBER DUCK ###")
    rubber_duck.display()
    rubber_duck.performFly()
    rubber_duck.performQuack()

    print("### REDHEAD DUCK ###")
    redhead_duck.display()
    redhead_duck.performFly()
    redhead_duck.performQuack()

if __name__ == '__main__':
    main()
